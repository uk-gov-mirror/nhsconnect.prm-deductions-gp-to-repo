#!/bin/bash

set -Eeo pipefail

###########################
# Local Config Parameters #
###########################

AWS_DEFAULT_REGION=eu-west-2
IMAGE_REPO_NAME=deductions/gp-to-repo
export NHS_SERVICE=gp-to-repo

####################################
# Instance (Environment) Variables #
####################################

function check_env {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function check_nhs_service {
  if [[ -z "${NHS_SERVICE}" ]]; then
    echo "Must set NHS_SERVICE"
    exit 1
  fi
}

function configure_local_envs {
  export NODE_ENV=local
  export DATABASE_USER=deductions_user
  export DATABASE_PASSWORD=secret
  export DATABASE_NAME=deductions_test
  export DATABASE_HOST=db
  export AUTHORIZATION_KEYS=not-real
  export GP2GP_AUTHORIZATION_KEYS=auth-key-1
  export GP2GP_URL="www.notreal.com"
  export REPOSITORY_URI=$IMAGE_REPO_NAME
  export GP_TO_REPO_SKIP_MIGRATION=false
  configure_service_url
  get_latest_commit_hash
}

function configure_service_url {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    export SERVICE_URL=http://${NHS_SERVICE}:3000
  else
    export SERVICE_URL=https://${NHS_ENVIRONMENT}.${NHS_SERVICE}.patient-deductions.nhs.uk
  fi
}

function get_latest_commit_hash {
  export COMMIT_HASH=$(git rev-parse HEAD | cut -c 1-7)
}

function get_aws_account_id {
    AWS_ACCOUNT_ID=$(dojo -c Dojofile-infra "aws sts get-caller-identity | jq -r .Account")
 }

function configure_aws_service_gp2gp_auth_keys {
    check_env
    get_aws_account_id
    parameter_name="/repo/${NHS_ENVIRONMENT}/user-input/gp2gp-adaptor-authorization-keys"
    echo "${parameter_name}"
    export GP2GP_AUTHORIZATION_KEYS=$(dojo -c Dojofile-infra "aws ssm get-parameter --with-decryption --region ${AWS_DEFAULT_REGION} --name  ${parameter_name} | jq -r .Parameter.Value")
}

function configure_aws_service_auth_keys {
    check_env
    get_aws_account_id
    parameter_name="/repo/${NHS_ENVIRONMENT}/user-input/${NHS_SERVICE}-authorization-keys"
    echo "${parameter_name}"
    export AUTHORIZATION_KEYS=$(dojo -c Dojofile-infra "aws ssm get-parameter --with-decryption --region ${AWS_DEFAULT_REGION} --name  ${parameter_name} | jq -r .Parameter.Value")
}

function get_aws_ssm_secret {
  secret_id=$1
  json=$(dojo -c Dojofile-infra "aws ssm get-parameter --with-decryption --region $AWS_DEFAULT_REGION --name $secret_id")
  if [ $? != 0 ]; then
    >&2 echo "Failed to obtain AWS secret from SSM: $secret_id"
    exit 5
  fi
  echo $json | jq -r ".Parameter.Value"
}

#######################
# Terraform Functions #
#######################

function tf_plan {
  operation=$1
  cd terraform

  COMMIT_HASH=$(git rev-parse HEAD | cut -c 1-7)
  IMAGE_TAG=${COMMIT_HASH}

  terraform init -reconfigure -backend-config key=${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate
  terraform get # modules
  if [[ "${operation}" == "create" ]]; then
    terraform plan -var task_image_tag=$IMAGE_TAG -var-file=$NHS_ENVIRONMENT.tfvars -out="nhs_deployment.tfplan"
  elif [[ "${operation}" == "destroy" ]]; then
    terraform plan -var task_image_tag=$IMAGE_TAG -var-file=$NHS_ENVIRONMENT.tfvars -out="nhs_deployment.tfplan" -destroy
  else
    echo "Unknown operation (should be create or destroy), got: ${operation}"
    exit 1
  fi
}

function tf_apply {
  cd terraform
  terraform init -backend-config key=${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate
  terraform get # modules
  terraform apply nhs_deployment.tfplan
  terraform output -json > tf-out.json
}

####################
# Script Functions #
####################

function send_canary_update_message {
  check_nhs_service
  node scripts/send-canary-update.js $(npm outdated --parseable)
}

function configure_hangout_webhook {
  export GOOGLE_CHAT_CANARY_WEBHOOK=$(get_aws_ssm_secret "/repo/prod/user-input/gocd-google-chat-canary-webhook")
  if [ -z "${GOOGLE_CHAT_CANARY_WEBHOOK}" ]; then
    echo "Unable to obtain GOOGLE_CHAT_CANARY_WEBHOOK from AWS"
    exit 5
  fi
}

############################
# Docker Related Functions #
############################

function docker_login {
  echo Logging in to Amazon ECR...
  eval $(dojo -c Dojofile-infra "aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION")
}

function configure_docker_repository_uri {
  docker_login
  get_aws_account_id
  export REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/$IMAGE_REPO_NAME
}

function build_docker_image {
  echo Build started on `date`
  get_latest_commit_hash
  IMAGE_TAG=${COMMIT_HASH}
  echo Building the Docker image...
  docker build -t $REPOSITORY_URI:latest -t $REPOSITORY_URI:$IMAGE_TAG .
  echo Build completed on `date`
}

###########
# Testing #
###########

function test_functional {
  check_env
  npm install
  if [[ $NHS_ENVIRONMENT == "dev" ]]; then
    npm run test:health
  else
    npm run test:functional
  fi
}

###########
## TASKS ##
###########

command="$1"
case "${command}" in
  _dep)
      npm install
      npm audit
      ;;
  dep)
      dojo "./tasks _dep"
      ;;
  _list_outdated)
      npm install
      npm outdated > outdated-dependencies.txt || send_canary_update_message
      ;;
  list_outdated)
      configure_hangout_webhook
      dojo "./tasks _list_outdated"
      ;;
  update_package_json)
      dojo "npx npm-check-updates -u"
      ;;
  send_dead_canary_message)
      check_nhs_service
      configure_hangout_webhook
      dojo "node scripts/send-canary-error.js"
      ;;
  _build)
      rm -rf build
      npm install
      npm run build
      ;;
  build)
      dojo "./tasks _build"
      ;;
  _test)
      npm install
      npm run test
      ;;
  test)
      dojo "./tasks _test"
      ;;
  _test_integration)
      configure_local_envs
      npm install
      npm run db:migrate
      npm run test:integration
      npm run db:teardown
      ;;
  test_integration)
      configure_local_envs
      dojo -c Dojofile-itest "./tasks _test_integration"
      ;;
  _test_functional)
      test_functional
      ;;
  test_functional)
      configure_aws_service_auth_keys
      configure_aws_service_gp2gp_auth_keys
      configure_service_url
      dojo "./tasks _test_functional"
      ;;
  _test_coverage)
      npm install
      npm run db:migrate
      npm run test:coverage
      ;;
  test_coverage)
      configure_local_envs
      dojo -c Dojofile-itest "./tasks _test_coverage"
      ;;
  build_docker_local)
      configure_local_envs
      build_docker_image
      ;;
  build_docker)
      configure_docker_repository_uri
      build_docker_image
      echo "Pushing the Docker image... $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG"
      docker push $REPOSITORY_URI
      ;;
  _test_docker)
      npm install
      npm run test:docker
      ;;
  test_docker)
      configure_local_envs
      configure_docker_repository_uri
      dojo -c Dojofile-dtest "./tasks _test_docker"
      ;;
  test_docker_local)
      configure_local_envs
      dojo -c Dojofile-dtest "./tasks _test_docker"
      ;;
  run_docker_local)
      configure_local_envs
      dojo -c Dojofile-dtest
      ;;
  tf)
      check_env
      dojo -c Dojofile-infra "bash"
      ;;
  _tf_plan)
      tf_plan "$2"
      ;;
  tf_plan)
      check_env
      dojo -c Dojofile-infra "./tasks _tf_plan $2"
      ;;
  _tf_apply)
      tf_apply
      ;;
  tf_apply)
      check_env
      dojo -c Dojofile-infra "./tasks _tf_apply"
      ;;
  _wait_ecs)
      aws ecs wait services-stable \
        --region $AWS_DEFAULT_REGION \
        --cluster $NHS_ENVIRONMENT-deductions-private-ecs-cluster \
        --services $NHS_ENVIRONMENT-gp-to-repo-service
      ;;
  wait_ecs)
      check_env
      dojo -c Dojofile-infra "./tasks _wait_ecs"
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
